@page "/"

@rendermode InteractiveServer

<PageTitle>Upload</PageTitle>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<style>
    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }
</style>

<h1 style="font-weight: bold; text-align: center; ">Welcome To</h1>

<img src="https://www.marketbeat.com/logos/oge-energy-corp-logo.jpg" alt="Inflow Logo" width="75" height="25" style="align-content: center;">


<label for="fileUpload" class="btn btn-primary rounded-pill"
       style="background-color: black; color: white; font-weight: bold; font-size: 20px; width: 15%; border-width: 1mm; border-color: white; cursor: pointer; text-align: center;">
    Upload File
    <InputFile id="fileUpload" OnChange="HandleFileUpload" accept=".csv" style="display: none;" />
</label>



@* <pre>@fileCSVHandler.fileContents</pre> *@
@* <pre>@fileCSVHandler.ConvertCsvTo2DArray(fileCSVHandler.fileContents)[0,0]</pre> *@

@* [0,0] is top left corner
[1,0] is one down from top left corner 
set up as [y,x] i know its goofy sorry*@

@if (strings.Count > 0)
{
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Event Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in strings)
            {
                <tr>
                    <td>@entry</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public class Entry
    {
        public string time { get; } = "";
        public string Location { get; } = "";
        public string ReaderDesc { get; } = "";
        public string IDHash { get;} = "";
        public int DevID { get; } 
        public int Machine { get;}

        public Entry(string time, string Location ,string ReaderDesc , string IDHash, int DevID, int Machine){

            this.time = time;
            this.Location = Location;
            this.ReaderDesc = ReaderDesc;
            this.IDHash = IDHash;
            this.DevID = DevID;
            this.Machine = Machine;

        }
    }

    public List<Entry> Entries = new();


    List<string> strings = new List<string>();
 
   private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        using var stream = file.OpenReadStream(); 
        using var reader = new StreamReader(stream);

        string line;
        bool firstLine = true;
        while ((line = await reader.ReadLineAsync()) != null)
        {
            
            //columns[0] Time
            //columns[1] pp location
            //columns[2] room location
            //columns[3] Hash
            //columns[4] DevID
            //columns[5] Matchine
            if(!firstLine){
            var columns = line.Split(',');
             Entries.Add(new Entry(columns[0],columns[1],columns[2],columns[3],int.Parse(columns[4]),int.Parse(columns[5]))); 
             }
             else{
                firstLine = false;
             }
        }
         Console.WriteLine(Entries[0].DevID); 
    }
    
}





    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


