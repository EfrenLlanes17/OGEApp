@page "/fulllist"
@rendermode InteractiveServer

@inject NavigationManager Navigation

<PageTitle>FullList</PageTitle>


@* Back To Activity Button*@

<MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="backToActivity">
        <b style="text-align: left; width: 100%;">Activity</b>
    </MudButton>


@* Graph vs list selection*@
<div style="width: 50%; margin-left: 25%; display: flex; justify-content: center; align-items: center;">
    <MudStack>
        <MudToggleGroup T="string" SelectedClass="@_style" @bind-Value="_value1" Color="Color.Primary" CheckMark FixedContent>
            <MudToggleItem Value="@("Graph")" Text="Graph" />
            <MudToggleItem Value="@("List")" Text="List" />
        </MudToggleGroup>
    </MudStack>
</div>

@* If List is selected*@

@if(_value1.Equals("List")){
@for (int i = 0; i < Labels.Length && (!isFlags || i < renderLimit); i++)
{
    if (!isFlags)
    {
        @* If List is selected and its not saftey Flags*@
       
        <div style="margin: 10px 0; padding: 12px; border-radius: 10px; background-color: rgb(29, 29, 29); color: white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">
            <h3 style="font-size: 18px; margin: 0;">
                <span style="font-weight: bold; color: #ffffff;">#@(i + 1)</span>
                <span style="margin-left: 10px;">@item @Labels[i]</span>
            </h3>
            <p style="margin: 4px 0 0 28px; font-size: 15px;">
                <div>
                <strong>Scans:</strong> @Series[i]
                </div>
                @if(item.Equals("Panel")){
                     <strong>Connected Readers:</strong>
                 foreach(string str in GetUniqueReaderDescs(int.Parse(Labels[i]))){ 
               
                     <h1 style="margin-left: 0.5cm; font-size: 12px"> @str</h1>
                 } 
                 }
                 else if(item.Equals("Reader")){
                    <strong>Connected Panel: </strong> @GetUniquePannel(Labels[i]).ToArray()[0]
                 

                 }
                   
              
                
                
                
            </p>
        </div>
        
    }
    else
    {
        @* If List is selected and its saftey Flags*@
        <div style="margin: 10px 0; padding: 12px; border-radius: 10px; background-color: rgb(29, 29, 29); color: white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">
            <h3 style="font-size: 17px;">@Labels[i]</h3>
        </div>
    }
}
@if (isFlags && renderLimit < Labels.Length)
{
    @* Show more Button*@
    <div style="text-align: center; margin-top: 10px;">
        <button @onclick="ShowMore"
                style="padding: 10px 20px; background-color: #444; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Show More
        </button>
    </div>
}

@* Scroll to top Button*@
<MudScrollToTop>
    <MudFab 
        Color="Color.Tertiary" 
        StartIcon="@Icons.Material.Filled.KeyboardArrowUp" 
        Size="Size.Large" 
        Class="custom-fab" />
</MudScrollToTop>

}
else{
    if(!isFlags){
        @* If Graph is selected and its not saftey Flags*@
     if(item.Equals("")){
         @* If Graph is selected and its not saftey Flags and its days of the week*@
         <div style="width: 100%; display: flex; flex-direction: column; align-items: center; padding: 30px;">
    <h2 style="color: white; font-size: 36px; margin-bottom: 14px;"><b>@LabelOfGraph</b></h2>
    <div style="transform-origin: top; width: 100%;">
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="listOfChartSeries"
                  XAxisLabels="@LabelsForGraph"
                  @bind-SelectedIndex="selIndex"
                  Width="100%"
                  Height="525px"
                  Style="color: #FFFFFF;"
                  ChartOptions="@Options" />
    </div>
</div>
     
    }
    else{
         @* If Graph is selected and its not saftey Flags and a bar graph*@
<div style="width: 100%; display: flex; flex-direction: column; align-items: center; padding: 30px;">
    <h2 style="color: white; font-size: 36px; margin-bottom: 14px;"><b>@LabelOfGraph</b></h2>
    <div style="transform-origin: top; width: 100%;">
        <MudChart ChartType="ChartType.Bar"
                  ChartSeries="listOfChartSeries"
                  XAxisLabels="@LabelsForGraph"
                  @bind-SelectedIndex="selIndex"
                  Width="100%"
                  Height="525px"
                  Style="color: #FFFFFF;"
                  ChartOptions="@Options" />
    </div>
</div>
    }

    }
    else{
         @* If Graph is selected and its saftey Flags*@
    <div style="width: 100%; display: flex; flex-direction: column; align-items: center;">
                <h2 style="color: white; font-size: 32px; margin-bottom: 5px;  margin-top: 3%;"><b>Safety Flags</b></h2>
                <div style="color: white; font-size: 20px; margin-bottom: 5px; margin-top: 3%;">
                    @foreach (var s in Upload.listOfErrors.Take(4))
                    {
                        if (!s.Equals("No issues detected with machines or readers."))
                        {
                            <div style="display: flex; align-items: flex-start; gap: 20px; width: 40cm;">
                                <img src="images/error.jpeg" alt="Error Img" width="60" height="60" style="margin-left: 200px;">
                                <h3 style="font-size: 28px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex; align-items: flex-start; gap: 20px; width: 40cm;">
                                <img src="images/check.png" alt="Check Img" width="50" height="50" style="margin-left: 420px;">
                                <h3 style="font-size: 28px; margin-bottom: 5%; margin-top: 0.5%;">@s</h3>
                            </div>
                        }
                    }
                </div>
            </div>
    }
}





                
                

<style>
.mud-chart text {
    fill: white !important;
}

.mud-chart-legend-item{
    visibility: hidden;
}

    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }

    input {
  color-scheme: dark;
}
.custom-fab {
    background-color: black; 
    border: 2px solid white;  
}

.custom-striped {
        background-color: white;
        color: black ;
    }

.mud-charts-xaxis text {
    font-size: 68%
}

</style>





@code{

     public ChartOptions Options = new ChartOptions();

    private string _style = "custom-striped";

    private string _value1 = "Graph";

    private int selIndex = -1; 

    public static string LabelOfGraph { get; set; }

    public static string[] Labels { get; set; }

    
    public static double[] Series { get; set; }

    public static string item  { get; set; }

    public static List<ChartSeries> listOfChartSeries { get; set; }

    public static string[] LabelsForGraph { get; set; }

    private int renderLimit = 1000;

    private void ShowMore()
    {
        renderLimit += 1000;
    }

    public static List<string> GetUniqueReaderDescs(int panel)
{
    return Upload.Entries
        .Where(e => e.Machine == panel)  
        .Select(e => e.ReaderDesc)               
        .Distinct()                              
        .ToList();                               
}

public static List<int> GetUniquePannel(string reader)
{
    return Upload.Entries
        .Where(e => e.ReaderDesc == reader)  
        .Select(e => e.Machine)               
        .Distinct()                              
        .ToList();                               
}

    public static Boolean isFlags { get; set; }

        private void backToActivity()
    {
        Navigation.NavigateTo("/activity");
    }
     
     [Inject] private IJSRuntime JSRuntime { get; set; }

private bool hasScrolled = false;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.scrollTo(0, 0);");
    }
}

 protected override void OnInitialized()
    {
        
        
    }

}