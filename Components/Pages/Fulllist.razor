@page "/fulllist"
@rendermode InteractiveServer

@inject NavigationManager Navigation

<PageTitle>FullList</PageTitle>

<MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="backToActivity">
        <b style="text-align: left; width: 100%;">Activity</b>
    </MudButton>


@for (int i = 0; i < Labels.Length && (!isFlags || i < renderLimit); i++)
{
    if (!isFlags)
    {
        <div style="margin: 10px 0; padding: 12px; border-radius: 10px; background-color: rgb(29, 29, 29); color: white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">
            <h3 style="font-size: 18px; margin: 0;">
                <span style="font-weight: bold; color: #ffffff;">#@(i + 1)</span>
                <span style="margin-left: 10px;">@item @Labels[i]</span>
            </h3>
            <p style="margin: 4px 0 0 28px; font-size: 15px;">
                <div>
                <strong>Scans:</strong> @Series[i]
                </div>
                @if(item.Equals("Panel")){
                     <strong>Connected Readers:</strong>
                 foreach(string str in GetUniqueReaderDescs(int.Parse(Labels[i]))){ 
               
                     <h1 style="margin-left: 0.5cm; font-size: 12px"> @str</h1>
                 } 
                   
              
                
                
                }
            </p>
        </div>
    }
    else
    {
        <div style="margin: 10px 0; padding: 12px; border-radius: 10px; background-color: rgb(29, 29, 29); color: white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">
            <h3 style="font-size: 17px;">@Labels[i]</h3>
        </div>
    }
}
@if (isFlags && renderLimit < Labels.Length)
{
    <div style="text-align: center; margin-top: 10px;">
        <button @onclick="ShowMore"
                style="padding: 10px 20px; background-color: #444; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Show More
        </button>
    </div>
}



                
                

<style>
    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }

    input {
  color-scheme: dark;
}


</style>

@code{

    
    public static string[] Labels { get; set; }

    
    public static double[] Series { get; set; }

    public static string item  { get; set; }

    private int renderLimit = 1000;

    private void ShowMore()
    {
        renderLimit += 1000;
    }

    public static List<string> GetUniqueReaderDescs(int panel)
{
    return Upload.Entries
        .Where(e => e.Machine == panel)  
        .Select(e => e.ReaderDesc)               
        .Distinct()                              
        .ToList();                               
}

    public static Boolean isFlags { get; set; }

        private void backToActivity()
    {
        Navigation.NavigateTo("/activity");
    }
     
}