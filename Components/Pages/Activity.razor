@page "/activity"
@rendermode InteractiveServer

@inject NavigationManager Navigation


@using PdfSharpCore.Pdf;
@using PdfSharpCore.Drawing;
@using System.IO;


<PageTitle>activity</PageTitle>


@* Back To upload button *@
<div style="display: grid; grid-template-columns: 1fr auto;">
    
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="backToUpload">
        <b style="text-align: left; width: 100%;">Upload</b>
    </MudButton>

   <div style="display: flex; justify-content: space-between; align-items: center;">
    @* PDF button *@
    <button @onclick="CreatePdf" style="
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border: 2px solid rgba(255, 255, 255, 0.726);
        border-radius: 12px;
        background-color: transparent;
        color: white;
    ">
        Download PDF
    </button>

    @* Settings button *@
    <div>
        <button class="btn btn-primary" style="background: transparent; border: transparent;" @onclick="ShowModal">
            <img src="images/settings.png" alt="Settings Icon" style="width: 40px; height: 38px;" />
        </button>
    </div>
</div>




</div>







<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 100px;">
    @* Activity Page Header *@
    <div>
        <h1 style="font-weight: bold; margin-top: 7mm;">Activity</h1>
    </div>

    
    <div style="text-align: center;">
        @* TimeFrame *@
        <h1 style="font-weight: bold; margin-top: 7mm;">Time Frame</h1>
        @*Date Filter*@
        <div style="display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 10px;">
            <input type="date" @bind="selectedDateMin"
                min="@Upload.firstDay.ToString("yyyy-MM-dd")" 
                max="@Upload.LastDay.ToString("yyyy-MM-dd")"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
            
            <span style="color: white; font-size: 18px;">To</span>

            <input type="date" @bind="selectedDateMax"
                min="@Upload.firstDay.ToString("yyyy-MM-dd")" 
                max="@Upload.LastDay.ToString("yyyy-MM-dd")"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
        </div>
        @* Location Filter *@
                <select @bind="location"  name="locations" id="locations" style="fit-content; background-color: black; border: white; color: white; text-align: center; font-weight: bold; margin-top: 10px;" >
                    <option value="">Location</option>
                    @foreach(var loc in getLocations()){
                        <option value=@loc>@loc</option>
                    }
                </select>

                


       
         @* @GetDaysBetweenDates(selectedDateMin, selectedDateMax) Days  *@
         @* @Upload.SCAN_THRESHOLDForPannel
       @Upload.SCAN_THRESHOLDForReader
       @Upload.nearPannel
       @Upload.nearReader
       @Upload.openTime
       @Upload.closeTime
       @Upload.PanelsOver
       @Upload.PanelsNear
       @Upload.ReadersOver
       @Upload.ReadersNear
       @Upload.afterHoursBool
       @Upload.dupBool *@
      
    </div>

    @* Entires and people information *@
    <div style="display: flex; flex-direction: column; align-items: flex-start; padding-left: 50%;">
        <h3 style="font-weight: bold; margin-top: 4mm;">Entries/Exits: @entriesAndExit</h3>
        <h3 style="font-weight: bold; margin-top: 4mm;">People: @amountPeople</h3>
        <h3 style="font-weight: bold; margin-top: 4mm; font-size:18px">Avg Unique People Per Day: @amountAvgPeoplePerDay</h3>
    </div>
</div>

@* Settings Pop up *@
@if (IsVisible)
{
    <div class="modal-backdrop" @onclick="HideModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
    <div class="modal-content" @onclick:stopPropagation 
         style="background: rgb(0, 0, 0); padding: 20px; border-radius: 12px; border: 2px solid white; max-width: 600px; width: 90%; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
        
        <h3 style="text-align: center; font-size: 30px;">Settings</h3>
        
        <div class="modal-body" style="margin-top: 10px;">
            @ChildContent
            

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.SCAN_THRESHOLDForPannel"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Maintenance Threshold for Panels</label>
        </div>

         <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.PanelsOver"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Panels Over" Issues
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.nearPannel"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">"Near" Distance from Threshold for Panels</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.PanelsNear"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Panels Near" Issues
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.SCAN_THRESHOLDForReader"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Maintenance Threshold for Readers</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.ReadersOver"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Readers Over" Issues
    </label>
        </div>
        
        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.nearReader"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">"Near" Distance from Threshold for Readers</label>
        </div>

         <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.ReadersNear"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Readers Near" Issues
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.operating247"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Operating 24/7
    </label>
        </div>

@if(!Upload.operating247){
        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="openTimeInput" type="time"
        @bind="Upload.openTime"
        style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
    <label for="openTimeInput" style="color: white; font-size: 18px; min-width: 150px;">Opening time</label>
</div>

<div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeInput" type="time"
        @bind="Upload.closeTime"
        style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
    <label for="closeTimeInput" style="color: white; font-size: 18px; min-width: 150px;">Closing time</label>
</div>
}



        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.afterHoursBool"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Regular Hours" Issues
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.dupMin"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Minimum Reader Duplicates Threshold</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.dupBool"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Duplicate Scan" Issues
    </label>
        </div>



        



            @* <button class="modal-close" @onclick="HideModal" 
                    style="float: right; background: transparent; border-radius: 12px; border: 2px solid white; font-size: 24px; color: white; width: 20%; height: 10%;">
                Save
            </button> *@

            <h3>@Title</h3>
        </div>
    </div>
</div>

}

    
@* Graphs *@
<div style="text-align: center; width: 96%;">
    
        <div style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 100%;">
            
           
            @* Reader Graph *@
            <div class="mostActiveReaders" style="width: 30%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleReaderChartClick">
                <h2 style="color: white; font-size: 22px; margin-left:80px"><b>Most Active Readers</b></h2>
                <div style="transform-origin: top;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series3" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforReaders" Width="115%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
                </div>
            </div>

            @* People Graph *@
            <div class="mostActivePeople" style="width: 30%; display: flex; flex-direction: column; align-items: center; margin-left:5%;  margin-right:5%" @onclick="HandlePersonChartClick">
                <h2 style="color: white; font-size: 22px; margin-left:80px"><b>Most Active People</b></h2>
                <div style="transform-origin: top;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series2" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPeople" Width="115%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
                </div>
            </div>

            @* Panel Graph *@
            <div class="mostActivePanel" style="width: 30%; display: flex; flex-direction: column; align-items: center; %" @onclick="HandlePannelChartClick">
                <h2 style="color: white; font-size: 22px; margin-left:80px"><b>Most Active Panels</b></h2>
                <div style="transform-origin: top;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series4" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPanels" Width="112%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
                </div>
            </div>

             
        </div>
    
</div>

<div style="text-align: center; width: 100%;">
    
        <div style="display: flex; justify-content: center; align-items: flex-start; gap: 30px; width: 100%;">
            
        
            @* Times Graph *@
            <div class="mostActiveReadersPop" style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleTimesChartClick">
                <h2 style="color: white; font-size: 22px; margin-bottom: 5px;"><b>Avg Scans At Times</b></h2>
                <div style="transform-origin: top;">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="changechartToMatchTimeFrame(Series6)" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforTimes" Width="100%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
                </div>
            </div>

            @* Saftey Flags *@
            <div style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleFlagsChartClick">
                <h2 style="color: white; font-size: 22px; margin-bottom: 5px; margin-left:40px"><b>Safety Flags</b></h2>
                <div style="color: white; font-size: 20px; margin-bottom: 5px; margin-top: 8%;">
                    @foreach (var s in Upload.listOfErrors.Take(4))
                    {
                        if (!s.Equals("No issues detected with machines or readers."))
                        {
                            <div style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 12cm;">
                                <img src="images/error.jpeg" alt="Error Img" width="35" height="35" style="margin-left: 10px;">
                                <h3 style="font-size: 17px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 10cm;">
                                <img src="images/check.png" alt="Check Img" width="35" height="35" style="margin-left: 10px;">
                                <h3 style="font-size: 17px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                            </div>
                        }
                    }
                </div>
            </div>

            @* Days of the Week Graph *@
            <div class="mostActiveScanAct" style="width: 55%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleDaysOfTheWeekChartClick" >
                <h2 style="color: white; font-size: 22px; margin-bottom: 5px;"><b>Avg Scans Per Day</b></h2>
                <div style="transform-origin: top;">
                    <MudChart ChartType="ChartType.Line" ChartSeries="changechartToMatchTimeFrame(Series)" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabels" Width="95%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
                </div>
            </div>
        </div>
    
</div>
@* Heat Calendar *@
@* <div style="display: flex; justify-content: center;">
    <div style="width: 30%;">
<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Align="Align.Center">@CurrentMonth.ToString("MMMM yyyy")</MudText>
    <MudStack Row Justify="Justify.Center" Class="mb-2">
        <MudButton Variant="Variant.Text" OnClick="PreviousMonth">Previous</MudButton>
        <MudButton Variant="Variant.Text" OnClick="NextMonth">Next</MudButton>
    </MudStack>

    <MudGrid>
        
        @foreach (var date in GetCalendarDates())
        {
            <MudItem xs="1">
                @if (date.Month == CurrentMonth.Month)
                {
                    <MudButton Variant="Variant.Outlined"
                               Color="@(SelectedDate == date ? Color.Primary : Color.Default)"
                               OnClick="@(() => SelectDate(date))"
                               Style="width: 100%; min-width: 40px;">
                        @date.Day
                    </MudButton>
                }
                else
                {
                    <div></div>
                }
            </MudItem>
        }
    </MudGrid>

    <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">
        Selected Date: @SelectedDate.ToShortDateString()
    </MudText>
</MudPaper>
</div>
</div> *@

@* Cant figure out length issue *@
@* <div style="width: 100%; display: flex; flex-direction: column; align-items: center;">
    <h2 style="color: white; font-size: 22px; margin-left:80px"><b>Scans in Data Per Day</b></h2>
    
    <div style="width: 100%; display: flex; justify-content: center;">
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@Series7"
                  @bind-SelectedIndex="selIndex"
                  XAxisLabels="@XAxisLabelsforAllDays"
                  Width="100%"    
                  Height="350px"  
                  Style="color: #FFFFFF;"
                   />
    </div>
</div> *@


@* PDF success Message *@
<div style="position: absolute;
       top: 100px;
       left: 10px; z-index: 10; width: 90%">
    @if (showSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" style="width: 25%;" role="alert">
            @successMessage
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => showSuccess = false"></button>
        </div>
    }
    @if (showError)
    {
        <div class="alert alert-danger alert-dismissible fade show" style="width: 25%;" role="alert">
            @errorMessage
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => showError = false"></button>
        </div>
    }
</div>







@* <MudSimpleTable Style="overflow-x: auto; background-color: rgb(75, 72, 72);">
    <thead>
        <tr>
            <th>Day of the Week</th>
            <th>Event Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Upload.eventsByDayOfWeek)
        {
            <tr>
                <td>@entry.Key</td>
                <td>@entry.Value.Count</td>
            </tr>
        }
    </tbody>
</MudSimpleTable> *@

<style>
    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }

    input {
  color-scheme: dark;
}
.mud-chart text {
    fill: white !important;
}

.mud-charts-yaxis text {
    font-size: 62.5%
}

.mud-chart-legend-item{
    visibility: hidden;
}





.mostActiveReaders .mud-charts-xaxis text {
    font-size: 65%
}

 .mostActiveReadersPop .mud-charts-xaxis text {
    font-size: 110%
} 

 .mostActiveScanAct .mud-charts-xaxis text {
    font-size: 100%
} 

.mostActiveReadersPop .mud-charts-yaxis text {
    font-size: 80%
} 

 .mostActiveScanAct .mud-charts-yaxis text {
    font-size: 80%
} 

 .mostActivePeople .mud-charts-xaxis text {
    font-size: 75%
} 

.mostActivePanel .mud-charts-xaxis text {
    font-size: 100%
} 




</style>






@code {

    private string successMessage;
    private string errorMessage;
    private bool showSuccess = false;
    private bool showError = false;

    @* private DateTime CurrentMonth = DateTime.Today;
    private DateTime SelectedDate = DateTime.Today;
    private readonly string[] WeekDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

    private void PreviousMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(-1);
    }

    private void NextMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(1);
    }

    private void SelectDate(DateTime date)
    {
        SelectedDate = date;
    }

    private IEnumerable<DateTime> GetCalendarDates()
    {
        var firstDayOfMonth = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
        var daysBefore = (int)firstDayOfMonth.DayOfWeek;
        var start = firstDayOfMonth.AddDays(-daysBefore);

        for (int i = 0; i < 42; i++) // 6 weeks
        {
            yield return start.AddDays(i);
        }
    } *@
    
public void CreatePdf()
{
try
    {

    string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
    string dateNow = DateTime.Now.ToString("MMddyyyy_HHmmss");
    string pdfPath = Path.Combine(desktopPath, $"Inflow_Summary_{dateNow}.pdf");

    var document = new PdfDocument();
    var page = document.AddPage();
    var gfx = XGraphics.FromPdfPage(page);

    // Fonts - slightly smaller
    var bigFont = new XFont("Times New Roman", 26, XFontStyle.Bold);
    var headerFont = new XFont("Times New Roman", 18, XFontStyle.Bold);
    var regularFont = new XFont("Times New Roman", 14, XFontStyle.Regular);
    var smallFont = new XFont("Times New Roman", 11, XFontStyle.Regular);
    var tinyFont = new XFont("Times New Roman", 9, XFontStyle.Regular);

    // Images - smaller
    XImage inflowLogo = XImage.FromFile("wwwroot/images/inflowLogo.png");
    XImage ogeLogo = XImage.FromFile("wwwroot/images/redOGELogo.png");

    // Layout variables
    double marginLeft = 30;
    double marginTop = 30;
    double lineSpacing = 20;
    double currentY = 0;

    // Header Logos
    gfx.DrawImage(inflowLogo, marginLeft, currentY + 20, 100, 35);
    gfx.DrawImage(ogeLogo, page.Width - marginLeft - 100, currentY + 15, 100, 40);
    currentY += 50;

    // Title
    gfx.DrawString("Inflow Summary", bigFont, XBrushes.Black,
        new XRect(0, currentY, page.Width, page.Height),
        XStringFormats.TopCenter);
    currentY += 40;

    // General Information
    gfx.DrawString("General Information", headerFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    gfx.DrawString($"• Uploaded File: {Pages.Upload.FileName}", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    gfx.DrawString($"• Time Frame: {selectedDateMin:MM-dd-yyyy} to {selectedDateMax:MM-dd-yyyy}", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    gfx.DrawString($"• Location: {location}", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing * 2;

    // Information Summary
    gfx.DrawString("Information Summary", headerFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    gfx.DrawString($"• Total Scans: {entriesAndExit}", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    gfx.DrawString($"• Unique People: {amountPeople}", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing;

    // Most Active People
    gfx.DrawString("• Most Active People:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    var series = Series2[0];
    for (int i = 0; i < 5 && i<XAxisLabelsforPeople.Length; i++)
    {
        gfx.DrawString($"    - {XAxisLabelsforPeople[i]}: {(int)series.Data[i]} scans", tinyFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 13;
    }

    currentY += 8;
    gfx.DrawString("• Most Active Panels:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    series = Series4[0];
    for (int i = 0; i < 5 && i<XAxisLabelsforPanels.Length; i++)
    {
        gfx.DrawString($"    - Panel {XAxisLabelsforPanels[i]}: {(int)series.Data[i]} scans", smallFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 15;
    }

    currentY += 8;
    gfx.DrawString("• Most Active Reader:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    series = Series3[0];
    for (int i = 0; i < 5 && i<XAxisLabelsforReaders.Length; i++)
    {
        gfx.DrawString($"    - {XAxisLabelsforReaders[i]}: {(int)series.Data[i]} scans", tinyFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 13;
    }

    // Avg Scans At Times
    currentY += 8;
    gfx.DrawString("• Avg Scans At Times:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    series = changechartToMatchTimeFrame(Series6)[0];
    for (int i = 0; i < 5 && i<XAxisLabelsforTimes.Length; i++)
    {
        gfx.DrawString($"    - {XAxisLabelsforTimes[i]}: {(int)series.Data[i]} scans", smallFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 15;
    }

    // Safety Flags
    currentY += 8;
    gfx.DrawString("• Safety Flags:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    for (int i = 0; i < Math.Min(Upload.listOfErrors.Count, 5); i++)
    {
        gfx.DrawString($"    - {Upload.listOfErrors[i]}", tinyFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 13;
    }

    // Avg Scan Activations
    currentY += 8;
    gfx.DrawString("• Avg Scans Per Day:", regularFont, XBrushes.Black, marginLeft, currentY);
    currentY += lineSpacing - 5;

    series = changechartToMatchTimeFrame(Series)[0];
    for (int i = 0; i < 5 && i<XAxisLabels.Length; i++)
    {
        gfx.DrawString($"    - {XAxisLabels[i]}: {(int)series.Data[i]} scans", smallFont, XBrushes.Black, marginLeft + 15, currentY);
        currentY += 15;
    }

    document.Save(pdfPath);
    document.Close();

    successMessage = "PDF successfully created on your Desktop.";
            errorMessage = null;
            showSuccess = true;
            showError = false;
    }

    catch (Exception ex)
    {
        errorMessage = $"An error occurred while creating the PDF: {ex.Message} ";
            successMessage = null;
            Console.WriteLine(ex.StackTrace);
            showSuccess = false;
            showError = true;
    }
}


    

    private static List<Upload.ReaderEvent> GetFilteredEntries()
{
    return Upload.Entries
        .Where(e =>
            DateTime.TryParse(e.Time, out DateTime eventDate) &&
            eventDate >= selectedDateMin &&
            eventDate <= selectedDateMax)
        .ToList();
}

private static List<Upload.ReaderEvent> GetFilteredEntriesByLocandDate()
{
    return Upload.Entries
        .Where(e =>
            DateTime.TryParse(e.Time, out DateTime eventDate) &&
            eventDate >= selectedDateMin &&
            eventDate <= selectedDateMax && e.Location == location)
        .ToList();
}
private void HandleFlagsChartClick()
    {
        
        Fulllist.Labels = CheckForPotentialIssues(GetFilteredEntriesByNameForIssues()).ToArray();
        Fulllist.item = "Warning";
        Fulllist.isFlags = true;
        Navigation.NavigateTo("/fulllist");

        
    }

private void HandleReaderChartClick()
    {
        
        Fulllist.Labels = GetTopActiveReadersNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.Series = GetTopActiveReadersCountsNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.item = "Reader";
        Fulllist.listOfChartSeries = Series3;
        Fulllist.LabelsForGraph = XAxisLabelsforReaders;
        Fulllist.LabelOfGraph = "Most Active Readers";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private static List<string> GetTopActiveReadersNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.ReaderDesc)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActiveReadersCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.ReaderDesc)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}



 private void HandlePersonChartClick()
    {
        
        Fulllist.Labels = GetTopActivePeopleNamesNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.Series = GetTopActivePeopleCountsNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.item = "Person";
        Fulllist.listOfChartSeries = Series2;
        Fulllist.LabelsForGraph = XAxisLabelsforPeople;
        Fulllist.LabelOfGraph = "Most Active People";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private void HandleTimesChartClick()
    {
        
        Fulllist.Labels = GetMostActiveHoursNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.Series = GetHourCountsNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.item = "Time";
        Fulllist.listOfChartSeries = changechartToMatchTimeFrame(Series6);
        Fulllist.LabelsForGraph = XAxisLabelsforTimes;
        Fulllist.LabelOfGraph = "Avg Scans At Times";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private void HandleDaysOfTheWeekChartClick()
    {
        
        Fulllist.Labels = XAxisLabels;
        var roundedData = changechartToMatchTimeFrame(Series)[0].Data
            .Select(d => Math.Round(d))
            .ToArray();

        Fulllist.Series = roundedData;
        Fulllist.item = "";
        Fulllist.listOfChartSeries = changechartToMatchTimeFrame(Series);
        Fulllist.LabelsForGraph = XAxisLabels;
        Fulllist.LabelOfGraph = "Avg Scans Per Day";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    public static List<string> GetMostActiveHoursNoLimit(List<Upload.ReaderEvent> events)
{
    TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

    return events
        .Select(e =>
        {
            if (DateTime.TryParse(e.Time, out var dt))
            {
                var utc = DateTime.SpecifyKind(dt, DateTimeKind.Utc);
                var central = TimeZoneInfo.ConvertTimeFromUtc(utc, centralZone);
                return (DateTime?)central;
            }
            return null;
        })
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Select(g => $"{g.Key:00}:00") // g.Key is the Central Time hour
        .ToList();
}




public static List<double> GetHourCountsNoLimit(List<Upload.ReaderEvent> events)
{
    return events
        .Select(e => DateTime.TryParse(e.Time, out var dt) ? dt : (DateTime?)null)
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count())
        .ToList();
}

private static double GetAverageUniquePeoplePerDay(List<Upload.ReaderEvent> entries)
{
    var dailyUniqueCounts = entries
        .Where(e => DateTime.TryParse(e.Time, out _))
        .Select(e => new { 
            Date = DateTime.Parse(e.Time).Date, 
            e.IDHash 
        })
        .GroupBy(e => e.Date)
        .Select(g => g.Select(x => x.IDHash).Distinct().Count())
        .ToList();

    return dailyUniqueCounts.Count == 0 
        ? 0 
        : dailyUniqueCounts.Average();
}


    private static List<double> GetTopActivePeopleCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.IDHash)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}


private static List<string> GetTopActivePeopleNamesNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.IDHash)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}


 private void HandlePannelChartClick()
    {
        
        Fulllist.Labels = GetTopActivePannelNamesNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.Series = GetTopActivePanelCountsNoLimit(GetFilteredEntriesByLocandDate()).ToArray();
        Fulllist.item = "Panel";
        Fulllist.listOfChartSeries = Series4;
        Fulllist.LabelsForGraph = XAxisLabelsforPanels;
        Fulllist.LabelOfGraph = "Most Active Panels";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private static List<string> GetTopActivePannelNamesNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActivePanelCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

void ShowModal() => IsVisible = true;
   void HideModal()
{
    IsVisible = false;
    Upload.listOfErrors = CheckForPotentialIssues(Upload.EntriesWithDups);
    
}


  public static List<string> getLocations(){
            return listOflocations;
        }

    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }


 public static List<string> listOflocations = new List<string>();
    
   
    private static string _location = "";

public static string location
{
    get => _location;
    set
    {
        if (_location != value)
        {
            _location = value;
            OnLocationChanged(value);
        }
    }
}

 private static List<Upload.ReaderEvent> GetFilteredEntriesByName()
{
    return GetFilteredEntries()
        .Where(e =>e.Location.Equals(location))
        .ToList();
}

private static List<Upload.ReaderEvent> GetFilteredEntriesByNameForIssues()
{
    return Upload.EntriesWithDups
        .Where(e =>e.Location.Equals(location))
        .ToList();
}

private static void OnLocationChanged(string newValue)
{
    

    //Console.WriteLine($"Min: {selectedDateMin}" + " " + $"Max: {selectedDateMax}");
   
    //Console.WriteLine(GetFilteredEntries().Count);
    //This is for the warning flags
     Upload.listOfErrors = CheckForPotentialIssues(GetFilteredEntriesByNameForIssues()); 
    
    //This is for most active people
    XAxisLabelsforPeople = GetTopActivePeopleNames(GetFilteredEntriesByName()).ToArray();
    Series2.Clear();
    Series2.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePeopleCounts(GetFilteredEntriesByName()).ToArray()});

//This is for Pannels
    XAxisLabelsforPanels = GetTopActivePanels(GetFilteredEntriesByName()).ToArray();
    Series4.Clear();
    Series4.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePanelCounts(GetFilteredEntriesByName()).ToArray()});

//This is for Readers
    XAxisLabelsforReaders = GetTopActiveReaders(GetFilteredEntriesByName()).ToArray();
    Series3.Clear();
    Series3.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActiveReadersCounts(GetFilteredEntriesByName()).ToArray()});

    //This is for Times
    XAxisLabelsforTimes = GetMostActiveHours(GetFilteredEntriesByName()).ToArray();
    Series6.Clear();
    Series6.Add(new ChartSeries() { Name = "# of Entries", Data = GetHourCounts(GetFilteredEntriesByName()).ToArray()});

//This is for locations
@* Layout.MainLayout.locations.Clear();
                foreach(string s in GetLocations()){
                    Layout.MainLayout.locations.Add(s);
                } *@


//This is for unique people count
amountPeople = GetUniquePeopleCount(GetFilteredEntriesByName());

amountAvgPeoplePerDay = (int)GetAverageUniquePeoplePerDay(GetFilteredEntriesByName());

//This is for entries/exists
entriesAndExit = GetFilteredEntriesByName().Count;

//This is for scan Activations
OrganizeEventsByDayOfWeek(GetFilteredEntriesByName());
  

  
}


    

     private static bool showContent = true;

    private static void nextGraphs()
    {
        showContent = !showContent;
        
        
    }


    public int GetDaysBetweenDates(DateTime selectedDateMin, DateTime selectedDateMax)
{
    return (selectedDateMax - selectedDateMin).Days + 1;
}

private List<ChartSeries> changechartToMatchTimeFrame(List<ChartSeries> s1)
{
    var s2 = new List<ChartSeries>();
    int days = GetDaysBetweenDates(selectedDateMin, selectedDateMax);

    foreach (var series in s1)
    {
        // Clone the data array
        var newData = (double[])series.Data.Clone();

        // Modify the cloned data
        for (int i = 0; i < newData.Length; i++)
        {
            newData[i] /= days;
        }

        // Create a new ChartSeries with copied properties and modified data
        s2.Add(new ChartSeries
        {
            Name = series.Name,
            Data = newData
        });
    }

    return s2;
}


public static void OnDateChange(){
    //Console.WriteLine($"Min: {selectedDateMin}" + " " + $"Max: {selectedDateMax}");
   
    //Console.WriteLine(GetFilteredEntries().Count);
    //This is for the warning flags
    @* Upload.listOfErrors = CheckForPotentialIssues(GetFilteredEntries()); *@
    
    //This is for most active people
    XAxisLabelsforPeople = GetTopActivePeopleNames(GetFilteredEntriesByLocandDate()).ToArray();
    Series2.Clear();
    Series2.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePeopleCounts(GetFilteredEntriesByLocandDate()).ToArray()});

//This is for Pannels
    XAxisLabelsforPanels = GetTopActivePanels(GetFilteredEntriesByLocandDate()).ToArray();
    Series4.Clear();
    Series4.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePanelCounts(GetFilteredEntriesByLocandDate()).ToArray()});

//This is for Readers
    XAxisLabelsforReaders = GetTopActiveReaders(GetFilteredEntriesByLocandDate()).ToArray();
    Series3.Clear();
    Series3.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActiveReadersCounts(GetFilteredEntriesByLocandDate()).ToArray()});

    //This is for Times
    XAxisLabelsforTimes = GetMostActiveHours(GetFilteredEntriesByLocandDate()).ToArray();
    Series6.Clear();
    Series6.Add(new ChartSeries() { Name = "# of Entries", Data = GetHourCounts(GetFilteredEntriesByLocandDate()).ToArray()});

//This is for locations
@* Layout.MainLayout.locations.Clear();
                foreach(string s in GetLocations()){
                    Layout.MainLayout.locations.Add(s);
                } *@


//This is for unique people count
amountPeople = GetUniquePeopleCount(GetFilteredEntriesByLocandDate());

amountAvgPeoplePerDay = (int)GetAverageUniquePeoplePerDay(GetFilteredEntriesByLocandDate());

//This is for entries/exists
entriesAndExit = GetFilteredEntriesByLocandDate().Count;

//This is for scan Activations
OrganizeEventsByDayOfWeek(GetFilteredEntriesByLocandDate());
}

public static List<string> GetMostActiveHours(List<Upload.ReaderEvent> events)
{
    TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

    return events
        .Select(e =>
        {
            if (DateTime.TryParse(e.Time, out var utcTime))
            {
                utcTime = DateTime.SpecifyKind(utcTime, DateTimeKind.Utc);
                return TimeZoneInfo.ConvertTimeFromUtc(utcTime, centralZone);
            }
            return (DateTime?)null;
        })
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Take(5)
        .Select(g => $"{g.Key:00}:00")
        .ToList();
}




public static List<double> GetHourCounts(List<Upload.ReaderEvent> events)
{
    TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

    return events
        .Select(e =>
        {
            if (DateTime.TryParse(e.Time, out var utcTime))
            {
                utcTime = DateTime.SpecifyKind(utcTime, DateTimeKind.Utc);
                return TimeZoneInfo.ConvertTimeFromUtc(utcTime, centralZone);
            }
            return (DateTime?)null;
        })
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Take(5)
        .Select(g => (double)g.Count())
        .ToList();
}





private static void OrganizeEventsByDayOfWeek(List<Upload.ReaderEvent> events)
    {
        var dictionary = new Dictionary<string, List<Upload.ReaderEvent>>
        {
            {"Sunday", new List<Upload.ReaderEvent>()},
            {"Monday", new List<Upload.ReaderEvent>()},
            {"Tuesday", new List<Upload.ReaderEvent>()},
            {"Wednesday", new List<Upload.ReaderEvent>()},
            {"Thursday", new List<Upload.ReaderEvent>()},
            {"Friday", new List<Upload.ReaderEvent>()},
            {"Saturday", new List<Upload.ReaderEvent>()}
        };

        

        foreach (var evt in events)
        {
            if (DateTime.TryParse(evt.Time, out DateTime eventDate))
            {
                string dayOfWeek = eventDate.ToString("dddd");
                dictionary[dayOfWeek].Add(evt);
                
            }
        }
        Series.Clear();
        Series.Add(new ChartSeries() { Name = "# of Entries", Data = new double[] { dictionary["Sunday"].Count, dictionary["Monday"].Count, dictionary["Tuesday"].Count, dictionary["Wednesday"].Count, dictionary["Thursday"].Count, dictionary["Friday"].Count, dictionary["Saturday"].Count} });
    }


private static int GetUniquePeopleCount(List<Upload.ReaderEvent> entries)
{
    return entries.Select(e => e.IDHash).Distinct().Count();
}

 private static List<string> GetTopActiveReaders(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.ReaderDesc.Substring(22))
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActiveReadersCounts(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.ReaderDesc)
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

private static List<string> GetTopActivePanels(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActivePanelCounts(List<Upload.ReaderEvent> entries,int topN = 5)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

private static List<double> GetTopActivePeopleCounts(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.IDHash)
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}


private static List<string> GetTopActivePeopleNames(List<Upload.ReaderEvent> entries,int topN = 5)
{
    return entries
        .GroupBy(e => e.IDHash.Substring(0,10))
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

@* For Heat Calendar *@
@* public List<string> GetAllDays()
{
    TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

    return GetFilteredEntriesByLocandDate()
        .Select(e =>
        {
            if (DateTime.TryParse(e.Time, out var utcTime))
            {
                utcTime = DateTime.SpecifyKind(utcTime, DateTimeKind.Utc);
                return TimeZoneInfo.ConvertTimeFromUtc(utcTime, centralZone).Date;
            }
            return (DateTime?)null;
        })
        .Where(dt => dt.HasValue)
        .Select(dt => dt.Value.ToString("MM-dd"))
        .Distinct()
        .OrderBy(date => date)
        .ToList();
}


public List<double> GetScanCountsPerDay()
{
    TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

    var grouped = GetFilteredEntriesByLocandDate()
        .Select(e =>
        {
            if (DateTime.TryParse(e.Time, out var utcTime))
            {
                utcTime = DateTime.SpecifyKind(utcTime, DateTimeKind.Utc);
                return TimeZoneInfo.ConvertTimeFromUtc(utcTime, centralZone).Date;
            }
            return (DateTime?)null;
        })
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.ToString("MM-dd"))
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => (double)g.Count());

    // Match the order of days from GetAllDays
    var allDays = GetAllDays();
    return allDays.Select(day => grouped.ContainsKey(day) ? grouped[day] : 0).ToList();
} *@

public static List<string> CheckForPotentialIssues(List<Upload.ReaderEvent> entries)
{
    int SCAN_THRESHOLDForPannel = Upload.SCAN_THRESHOLDForPannel; 

    int nearPannel = Upload.nearPannel;

    int SCAN_THRESHOLDForReader = Upload.SCAN_THRESHOLDForReader; 
    int nearReader = Upload.nearReader;
    
var openingTime = Upload.openTime ?? new TimeOnly(5, 0);
var closingTime = Upload.closeTime ?? new TimeOnly(17, 0);

// List for issues
List<string> issues = new List<string>();

@if(!Upload.operating247){

var afterHours = entries
    .Where(e =>
    {
        // Parse the time string into a DateTime (assumed to be in UTC)
        if (!DateTime.TryParse(e.Time, out DateTime utcTime))
            return false;

        // Convert to Central Time (handles Daylight Saving automatically)
        TimeZoneInfo cst = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
        DateTime localTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime.ToUniversalTime(), cst);

        // Compare just the time portion
        var timeOnly = TimeOnly.FromDateTime(localTime);
        return timeOnly < openingTime || timeOnly > closingTime;
    })
    .Select(e => new { e.IDHash, e.Time, e.ReaderDesc })
    .ToList();

     if (afterHours.Any() && Upload.afterHoursBool)
    {
        foreach (var scan in afterHours)
            {
                DateTime utcTime = DateTime.Parse(scan.Time).ToUniversalTime();

                TimeZoneInfo centralZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
                DateTime centralTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, centralZone);
                issues.Add($"{scan.IDHash.Substring(0,10)} scanned at {scan.ReaderDesc} at {centralTime} — outside regular hours.");
            }
    }

}



    var duplicateScans = entries
    .OrderBy(e => e.IDHash).ThenBy(e => e.Time)
    .GroupBy(e => e.IDHash)
    .SelectMany(group =>
        group.Zip(group.Skip(1), (a, b) => new
        {
            Prev = a,
            Curr = b,
            PrevTime = DateTime.Parse(a.Time),
            CurrTime = DateTime.Parse(b.Time)
        })
        .Where(pair =>
            pair.Prev.ReaderDesc == pair.Curr.ReaderDesc &&
            pair.Prev.IDHash == pair.Curr.IDHash &&
            pair.Prev.DevID == pair.Curr.DevID &&
            pair.Prev.Machine == pair.Curr.Machine &&
            pair.CurrTime == pair.PrevTime
        )
        .Select(pair => pair.Curr)
    )
    .GroupBy(d => d.ReaderDesc)
    .Where(g => g.Count() > Upload.dupMin)
    .SelectMany(g => g)
    .ToList();



   
    var machineIssuesOver = entries
        .GroupBy(e => e.Machine)  
        .Where(g => g.Count() >= SCAN_THRESHOLDForPannel)
        .Select(g => new { Machine = g.Key, Count = g.Count() })
        .ToList();

         var machineIssuesNear = entries
        .GroupBy(e => e.Machine)  
        .Where(g => g.Count() + nearPannel >= SCAN_THRESHOLDForPannel && g.Count() < SCAN_THRESHOLDForPannel)
        .Select(g => new { Machine = g.Key, Count = g.Count() })
        .ToList();

    
    var readerDescIssuesOver = entries
        .GroupBy(e => e.ReaderDesc)  
        .Where(g => g.Count() >= SCAN_THRESHOLDForReader)  
        .Select(g => new { ReaderDesc = g.Key, Count = g.Count() })
        .ToList();

        var readerDescIssuesNear = entries
        .GroupBy(e => e.ReaderDesc)  
        .Where(g => g.Count() + nearReader >= SCAN_THRESHOLDForReader && g.Count() < SCAN_THRESHOLDForReader)  
        .Select(g => new { ReaderDesc = g.Key, Count = g.Count() })
        .ToList();

       



    if (machineIssuesOver.Any() && Upload.PanelsOver)
    {
        foreach (var issue in machineIssuesOver)
        {
            issues.Add($"Panel {issue.Machine} has {issue.Count} scans. Over threshold of {SCAN_THRESHOLDForPannel}");
        }
    }

     if (readerDescIssuesOver.Any() && Upload.ReadersOver)
    {
        foreach (var issue in readerDescIssuesOver)
        {
            issues.Add($"Reader {issue.ReaderDesc} : {issue.Count} scans. Over threshold of {SCAN_THRESHOLDForReader}");
        }
    }



    if (machineIssuesNear.Any() && Upload.PanelsNear)
    {
        foreach (var issue in machineIssuesNear)
        {
            issues.Add($"Panel {issue.Machine} : {issue.Count} scans. Near threshold of {SCAN_THRESHOLDForPannel}");
        }
    }

    

    if (readerDescIssuesNear.Any() && Upload.ReadersNear)
    {
        foreach (var issue in readerDescIssuesNear)
        {
            issues.Add($"Reader {issue.ReaderDesc} : {issue.Count} scans. Near threshold of {SCAN_THRESHOLDForReader}");
        }
    }

   if (duplicateScans.Any() && Upload.dupBool)
{
    var groupedByReader = duplicateScans
        .GroupBy(d => d.ReaderDesc)
        .Select(g => new { ReaderDesc = g.Key, Count = g.Count() });

    foreach (var group in groupedByReader)
    {
        issues.Add($"{group.ReaderDesc} has {group.Count} duplicate scans.");
    }
}

   
    if (!issues.Any())
    {
        issues.Add("No issues detected with machines or readers.");
    }

    return issues;
}





    

    

      @* public static DateTime selectedDateMin { get; set; } = DateTime.Today;
      public static DateTime selectedDateMax { get; set; } = DateTime.Today; *@




private static DateTime _selectedDateMin = DateTime.Today;
private static DateTime _selectedDateMax = DateTime.Today;




public static DateTime selectedDateMin
{
    get => _selectedDateMin;
    set
    {
        if (value <= _selectedDateMax)
        {
            
            _selectedDateMin = value;
            OnDateChange();
        }
    }
}

public static DateTime selectedDateMax
{
    get => _selectedDateMax;
    set
    {
        if (value >= _selectedDateMin)
        {
            
            _selectedDateMax = value;
            OnDateChange();
        }
    }
}




      

      public static int entriesAndExit { get; set; } = 0;

      private List<string> errorsfound = new List<string>
    {
        "Error 1: Invalid input.",
        "Error 2: Network issue.",
        "Error 3: Permission denied."
    };


      public static int amountPeople { get; set; } = 0;

      public static int amountAvgPeoplePerDay { get; set; } = 0;

      

       public static List<ChartSeries> Series = Upload.Series;

        public static List<ChartSeries> Series2 = Upload.SeriesPeople;

      public static List<ChartSeries> Series6 = Upload.SeriesTimes;

        public static List<ChartSeries> Series3 = Upload.SeriesReaders;

        public static List<ChartSeries> Series7 = Upload.SeriesAllDays;
        public static List<ChartSeries> Series4 = Upload.SeriesPanel;

        public  List<ChartSeries> Series5;

        public string[] XAxisLabels = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

        public static string[] XAxisLabelsforPeople = Pages.Upload.XAxisLabelsforPeople;

        public static string[] XAxisLabelsforReaders = Pages.Upload.XAxisLabelsforReaders;

        public static string[] XAxisLabelsforPanels = Pages.Upload.XAxisLabelsforPanels;

        public static string[] XAxisLabelsforTimes = Pages.Upload.XAxisLabelsforTimes;

        public static string[] XAxisLabelsforAllDays = Pages.Upload.XAxisLabelsforAllDays;

        private int selIndex = -1; 

        public ChartOptions Options = new ChartOptions();
        
      
     




    private void backToUpload()
    {
        Navigation.NavigateTo("/");
    }

    public void UpdateSeriesData()
{
    // Update Series5 (which is linked to Series3)
    //Series5 = changeReadersToPop(Series3); // Apply your changes dynamically
}


    protected override void OnInitialized()
    {
        
        

        Series5 = Series3;

       

        OnLocationChanged(location);
       
        
        //Options.YAxisTicks = 30;
        // Your startup logic here
    }

   

   

}