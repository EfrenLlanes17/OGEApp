@page "/activity"
@rendermode InteractiveServer

@inject NavigationManager Navigation

<PageTitle>activity</PageTitle>

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Material.Filled.ArrowBack"
           OnClick="backToUpload">
    <b>Upload</b>
</MudButton>

<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 150px;">
    <!-- Left Column: Activity Title -->
    <div>
        <h1 style="font-weight: bold; margin-top: 7mm;">Activity</h1>
    </div>

    <!-- Right Column: Timeframe and Date Inputs -->
    <div style="text-align: center;">
        <h1 style="font-weight: bold; margin-top: 7mm;">Timeframe</h1>

        <div style="display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 10px;">
            <input type="date" @bind="selectedDateMin"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
            
            <span style="color: white; font-size: 18px;">To</span>

            <input type="date" @bind="selectedDateMax"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
        </div>
         @GetDaysBetweenDates(selectedDateMin, selectedDateMax) Days 
      
    </div>

    <!-- Left Column: Entries/Exits and People Count -->
    <div style="display: flex; flex-direction: column; align-items: flex-start; padding-left: 50%;">
        <h3 style="font-weight: bold; margin-top: 7mm;">Entries/Exits: @entriesAndExit</h3>
        <h3 style="font-weight: bold; margin-top: 7mm;">People: @amountPeople</h3>
    </div>
</div>

    

<div style="text-align: center; width: 100%;">
    @if(showContent){

    <div  style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 100%;">
        <div class="mostActiveReadersPop" style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 15%;"><b>Avg Area Population Per Day</b></h2>
            <div style="transform: scale(0.80); transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@changeReadersToPop(Series3)" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforReaders" Width="120%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <div style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 24%;"><b>Warning Flags</b></h2>
            <div  style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 10%; margin-top: 5%;">
            @foreach(var s in Upload.listOfErrors.Take(4)){
                <div  style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 15cm;">
                <img src="images/error.jpeg" alt="Error Img" width="35" height="35" style="margin-left: 10px;">
                <h3 style="font-size: 17px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                </div>
            }
            </div>
        </div>

        <div style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 15%;"><b>Scan Activations</b></h2>
            <div style="transform: scale(0.80); transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabels" Width="120%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <button style="font-size: 75px; background-color: black; color: white; border-radius: 5px; padding: 20px 40px; cursor: pointer; padding-top: 6%;" @onclick="nextGraphs">
           > 
        </button>

    </div>
    }
</div>

<div style="text-align: center; width: 97%;">
    @if(!showContent){

       


    <div style="display: flex; justify-content: center; align-items: flex-start; gap: 0px; width: 100%;">

 <button style="font-size: 75px; background-color: black; color: white; border-radius: 5px; padding: 20px 40px; cursor: pointer; padding-top: 6%;" @onclick="nextGraphs">
    &lt;
</button>

        <div class="mostActiveReaders" style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 15%;"><b>Most Active Readers</b></h2>
            <div style="transform: scale(0.80); transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series3" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforReaders" Width="120%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        @* // more than 100 percent *@

        <div style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px; margin-left: 15%;"><b>Most Active People</b></h2>
            <div style="transform: scale(0.80); transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series2" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPeople" Width="120%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <div style="width: 50%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 20px; margin-bottom: 5px;  margin-left: 15%;"><b>Most Active Panels</b></h2>
            <div style="transform: scale(0.80); transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series4" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPanels" Width="120%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

    

    </div>
    }
</div>







@* <MudSimpleTable Style="overflow-x: auto; background-color: rgb(75, 72, 72);">
    <thead>
        <tr>
            <th>Day of the Week</th>
            <th>Event Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Upload.eventsByDayOfWeek)
        {
            <tr>
                <td>@entry.Key</td>
                <td>@entry.Value.Count</td>
            </tr>
        }
    </tbody>
</MudSimpleTable> *@

<style>
    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }

    input {
  color-scheme: dark;
}
.mud-chart text {
    fill: white !important;
}

.mostActiveReaders .mud-charts-xaxis text {
    font-size: 55%
}

.mostActiveReadersPop .mud-charts-xaxis text {
    font-size: 55%
}


</style>

@code {

    

    

     private bool showContent = true;

    private void nextGraphs()
    {
        showContent = !showContent;
        
        
    }


    public int GetDaysBetweenDates(DateTime selectedDateMin, DateTime selectedDateMax)
{
    return (selectedDateMax - selectedDateMin).Days;
}

private List<ChartSeries> changeReadersToPop(List<ChartSeries> s1)
{
    var s2 = new List<ChartSeries>();
    int days = GetDaysBetweenDates(selectedDateMin, selectedDateMax);

    foreach (var series in s1)
    {
        // Clone the data array
        var newData = (double[])series.Data.Clone();

        // Modify the cloned data
        for (int i = 0; i < newData.Length; i++)
        {
            newData[i] /= days;
        }

        // Create a new ChartSeries with copied properties and modified data
        s2.Add(new ChartSeries
        {
            Name = series.Name,
            Data = newData
        });
    }

    return s2;
}


public static void OnDateChange(){
    Console.WriteLine($"Min: {selectedDateMin}" + " " + $"Max: {selectedDateMax}");
}





    

    

      @* public static DateTime selectedDateMin { get; set; } = DateTime.Today;
      public static DateTime selectedDateMax { get; set; } = DateTime.Today; *@




private static DateTime _selectedDateMin = DateTime.Today;
private static DateTime _selectedDateMax = DateTime.Today;

public static DateTime selectedDateMin
{
    get => _selectedDateMin;
    set
    {
        if (value <= _selectedDateMax)
        {
            
            _selectedDateMin = value;
            OnDateChange();
        }
    }
}

public static DateTime selectedDateMax
{
    get => _selectedDateMax;
    set
    {
        if (value >= _selectedDateMin)
        {
            
            _selectedDateMax = value;
            OnDateChange();
        }
    }
}




      

      public static int entriesAndExit { get; set; } = 0;

      private List<string> errorsfound = new List<string>
    {
        "Error 1: Invalid input.",
        "Error 2: Network issue.",
        "Error 3: Permission denied."
    };


      public static int amountPeople { get; set; } = 0;

       public List<ChartSeries> Series = Upload.Series;

        public List<ChartSeries> Series2 = Upload.SeriesPeople;

    

        public  List<ChartSeries> Series3 = Upload.SeriesReaders;
        public List<ChartSeries> Series4 = Upload.SeriesPanel;

        public  List<ChartSeries> Series5;

        public string[] XAxisLabels = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

        public string[] XAxisLabelsforPeople = Pages.Upload.XAxisLabelsforPeople;

        public string[] XAxisLabelsforReaders = Pages.Upload.XAxisLabelsforReaders;

        public string[] XAxisLabelsforPanels = Pages.Upload.XAxisLabelsforPanels;

        private int selIndex = -1; 

        public ChartOptions Options = new ChartOptions();
        
        

     




    private void backToUpload()
    {
        Navigation.NavigateTo("/");
    }

    public void UpdateSeriesData()
{
    // Update Series5 (which is linked to Series3)
    Series5 = changeReadersToPop(Series3); // Apply your changes dynamically
}


    protected override void OnInitialized()
    {
        Options.InterpolationOption = InterpolationOption.NaturalSpline;
        

        Series5 = Series3;
        
        //Options.YAxisTicks = 30;
        // Your startup logic here
    }

   

   

}