@page "/activity"
@rendermode InteractiveServer

@inject NavigationManager Navigation

<PageTitle>activity</PageTitle>



<div style="display: grid; grid-template-columns: 1fr auto;">
    <!-- Upload button all the way to the left -->
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="backToUpload">
        <b style="text-align: left; width: 100%;">Upload</b>
    </MudButton>

    <!-- Show Popup button aligned to the right -->
    <div style="text-align: right;">
    <button class="btn btn-primary" style="background: transparent; border: transparent;" @onclick="ShowModal">
        <img src="images/settings.png" alt="Settings Icon" style="width: 40px; height: 38px;" />
    </button>
</div>

</div>







<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 100px;">
    <!-- Left Column: Activity Title -->
    <div>
        <h1 style="font-weight: bold; margin-top: 7mm;">Activity</h1>
    </div>

    <!-- Right Column: Timeframe and Date Inputs -->
    <div style="text-align: center;">
        <h1 style="font-weight: bold; margin-top: 7mm;">Timeframe</h1>

        <div style="display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 10px;">
            <input type="date" @bind="selectedDateMin"
                min="@Upload.firstDay.ToString("yyyy-MM-dd")" 
                max="@Upload.LastDay.ToString("yyyy-MM-dd")"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
            
            <span style="color: white; font-size: 18px;">To</span>

            <input type="date" @bind="selectedDateMax"
                min="@Upload.firstDay.ToString("yyyy-MM-dd")" 
                max="@Upload.LastDay.ToString("yyyy-MM-dd")"
                style="width: 150px; padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; text-align: center;">
        </div>
                <select @bind="location"  name="locations" id="locations" style="fit-content; background-color: black; border: white; color: white; text-align: center; font-weight: bold; margin-top: 10px;" >
                    <option value="">Location</option>
                    @foreach(var loc in getLocations()){
                        <option value=@loc>@loc</option>
                    }
                </select>

        
         @* @GetDaysBetweenDates(selectedDateMin, selectedDateMax) Days  *@
         @* @Upload.SCAN_THRESHOLDForPannel
       @Upload.SCAN_THRESHOLDForReader
       @Upload.nearPannel
       @Upload.nearReader
       @Upload.openTime
       @Upload.closeTime
       @Upload.PanelsOver
       @Upload.PanelsNear
       @Upload.ReadersOver
       @Upload.ReadersNear
       @Upload.afterHoursBool
       @Upload.dupBool *@
      
    </div>

    <!-- Left Column: Entries/Exits and People Count -->
    <div style="display: flex; flex-direction: column; align-items: flex-start; padding-left: 50%;">
        <h3 style="font-weight: bold; margin-top: 7mm;">Entries/Exits: @entriesAndExit</h3>
        <h3 style="font-weight: bold; margin-top: 7mm;">People: @amountPeople</h3>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop" @onclick="HideModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
    <div class="modal-content" @onclick:stopPropagation 
         style="background: rgb(0, 0, 0); padding: 20px; border-radius: 12px; border: 2px solid white; max-width: 500px; width: 90%; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
        
        <h3 style="text-align: center; font-size: 30px;">Settings</h3>
        
        <div class="modal-body" style="margin-top: 10px;">
            @ChildContent
            

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.SCAN_THRESHOLDForPannel"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Scan Threshold for Panels</label>
        </div>

         <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.PanelsOver"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Panels Over" Issue
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.nearPannel"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">'Near' dist from Thres for Panels</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.PanelsNear"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Panels Near" Issue
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.SCAN_THRESHOLDForReader"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Scan Threshold for Readers</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.ReadersOver"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Readers Over" Issue
    </label>
        </div>
        
        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.nearReader"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Near' dist from Thres for Readers</label>
        </div>

         <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.ReadersNear"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Readers Near" Issue
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.openTime"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Opening time (EX: 5AM --> 5)</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
            <input id="inputText" type="text"
                @bind="Upload.closeTime"
                style="padding: 5px; border: 1px solid #FFFFFF; border-radius: 5px; background-color: black; color: #FFFFFF; width:30%; text-align: center;" />
            <label for="inputText" style="color: white; font-size: 18px; min-width: 100px; ">Closing time (EX: 10PM --> 22)</label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.afterHoursBool"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Regular Hours" Issue
    </label>
        </div>

        <div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
    <input id="closeTimeCheckbox" type="checkbox"
           @bind="Upload.dupBool"
           style="width:30%; height: 20px;" />
    <label for="closeTimeCheckbox" style="color: white; font-size: 18px; min-width: 100px;">
        Show "Duplicate Scan" Issue
    </label>
        </div>



        



            @* <button class="modal-close" @onclick="HideModal" 
                    style="float: right; background: transparent; border-radius: 12px; border: 2px solid white; font-size: 24px; color: white; width: 20%; height: 10%;">
                Save
            </button> *@

            <h3>@Title</h3>
        </div>
    </div>
</div>

}

    

<div style="text-align: center; width: 100%;">
    @if(showContent){

    <div  style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 105%;" >
        <div class="mostActiveReadersPop" style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleTimesChartClick">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px;  margin-right: 5%;"><b>Avg Scans At Times</b></h2>
            <div style=" transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="changechartToMatchTimeFrame(Series6)" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforTimes" Width="100%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <div style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleFlagsChartClick">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px;  margin-left: 10%;"><b>Safety Flags</b></h2>
            <div  style="color: white; font-size: 20px; margin-bottom: 5px;  margin-top: 8%;">
            @foreach(var s in Upload.listOfErrors.Take(4)){
                if(!s.Equals("No issues detected with machines or readers.")){
                <div  style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 12cm;">
                <img src="images/error.jpeg" alt="Error Img" width="35" height="35" style="margin-left: 10px;">
                <h3 style="font-size: 17px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                </div>
                }
                else{
                    <div  style="display: flex; justify-content: center; align-items: flex-start; gap: 20px; width: 10cm;">
                    <img src="images/check.png" alt="Error Img" width="35" height="35" style="margin-left: 10px;">
                    <h3 style="font-size: 17px; margin-bottom: 5%; margin-top: 1%;">@s</h3>
                </div>
                }
            }
            </div>
        </div>

        <div class="mostActiveScanAct" style="width: 55%; display: flex; flex-direction: column; align-items: center;">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px;  margin-right: 8%;"><b>Avg Scan Activations</b></h2>
            <div style=" transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="changechartToMatchTimeFrame(Series)" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabels" Width="95%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <button style="font-size: 75px; background-color: black; color: white;  margin-right: 4%; cursor: pointer; padding-top: 8%; text-align: center; width: 5%;" @onclick="nextGraphs">
           > 
        </button>

    </div>
    }
</div>

<div style="text-align: center; width: 97%;">
    @if(!showContent){

       


    <div style="display: flex; justify-content: center; align-items: flex-start; gap: 30px; width: 100%;">

 <button style="font-size: 75px; background-color: black; color: white; cursor: pointer; padding-top: 9%;" @onclick="nextGraphs">
    &lt;
</button>

        <div class="mostActiveReaders" style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandleReaderChartClick">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px;  margin-left: 0%;"><b>Most Active Readers</b></h2>
            <div style=" transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series3" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforReaders" Width="105%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        @* // more than 100 percent *@

        <div  class="mostActivePeople"style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandlePersonChartClick">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px; margin-left: 4%;"><b>Most Active People</b></h2>
            <div style=" transform-origin: top;">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series2" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPeople" Width="105%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

        <div class="mostActiveScanAct" style="width: 50%; display: flex; flex-direction: column; align-items: center;" @onclick="HandlePannelChartClick">
            <h2 style="color: white; font-size: 22px; margin-bottom: 5px;  margin-left: 0%;"><b>Most Active Panels</b></h2>
            <div style=" transform-origin: top; ">
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series4" @bind-SelectedIndex="selIndex" XAxisLabels="@XAxisLabelsforPanels" Width="105%" Height="350px" Style="color: #FFFFFF;" ChartOptions="@Options"/>
            </div>
        </div>

    

    </div>
    }
</div>







@* <MudSimpleTable Style="overflow-x: auto; background-color: rgb(75, 72, 72);">
    <thead>
        <tr>
            <th>Day of the Week</th>
            <th>Event Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Upload.eventsByDayOfWeek)
        {
            <tr>
                <td>@entry.Key</td>
                <td>@entry.Value.Count</td>
            </tr>
        }
    </tbody>
</MudSimpleTable> *@

<style>
    body {
        background-color: black;
        color: white;
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
    }

    input {
  color-scheme: dark;
}
.mud-chart text {
    fill: white !important;
}

.mud-charts-yaxis text {
    font-size: 62.5%
}

.mud-chart-legend-item{
    visibility: hidden;
}


.mostActiveReaders .mud-charts-xaxis text {
    font-size: 65%
}

 .mostActiveReadersPop .mud-charts-xaxis text {
    font-size: 110%
} 

 .mostActiveScanAct .mud-charts-xaxis text {
    font-size: 100%
} 

 .mostActivePeople .mud-charts-xaxis text {
    font-size: 70%
} 




</style>

@code {

    

    private static List<Upload.ReaderEvent> GetFilteredEntries()
{
    return Upload.Entries
        .Where(e =>
            DateTime.TryParse(e.Time, out DateTime eventDate) &&
            eventDate >= selectedDateMin &&
            eventDate <= selectedDateMax)
        .ToList();
}

private void HandleFlagsChartClick()
    {
        
        Fulllist.Labels = CheckForPotentialIssues(Upload.Entries).ToArray();
        Fulllist.item = "Warning";
        Fulllist.isFlags = true;
        Navigation.NavigateTo("/fulllist");

        
    }

private void HandleReaderChartClick()
    {
        
        Fulllist.Labels = GetTopActiveReadersNoLimit(Upload.Entries).ToArray();
        Fulllist.Series = GetTopActiveReadersCountsNoLimit(Upload.Entries).ToArray();
        Fulllist.item = "Reader";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private static List<string> GetTopActiveReadersNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.ReaderDesc.Substring(22))
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActiveReadersCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.ReaderDesc)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}



 private void HandlePersonChartClick()
    {
        
        Fulllist.Labels = GetMostActiveHoursNoLimit(Upload.Entries).ToArray();
        Fulllist.Series = GetTopActivePeopleCountsNoLimit(Upload.Entries).ToArray();
        Fulllist.item = "Person";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private void HandleTimesChartClick()
    {
        
        Fulllist.Labels = GetMostActiveHoursNoLimit(Upload.Entries).ToArray();
        Fulllist.Series = GetHourCountsNoLimit(Upload.Entries).ToArray();
        Fulllist.item = "Time";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    public static List<string> GetMostActiveHoursNoLimit(List<Upload.ReaderEvent> events)
{
    return events
        .Select(e => DateTime.TryParse(e.Time, out var dt) ? dt : (DateTime?)null)
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Select(g => $"{((g.Key + 24 - 5) % 24):00}:00")  // Wraps hour to stay within 0–23
        .ToList();
}



public static List<double> GetHourCountsNoLimit(List<Upload.ReaderEvent> events)
{
    return events
        .Select(e => DateTime.TryParse(e.Time, out var dt) ? dt : (DateTime?)null)
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count())
        .ToList();
}

    private static List<double> GetTopActivePeopleCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.IDHash)
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}


private static List<string> GetTopActivePeopleNamesNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.IDHash.Substring(0,10))
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}


 private void HandlePannelChartClick()
    {
        
        Fulllist.Labels = GetTopActivePannelNamesNoLimit(Upload.Entries).ToArray();
        Fulllist.Series = GetTopActivePanelCountsNoLimit(Upload.Entries).ToArray();
        Fulllist.item = "Pannel";
        Fulllist.isFlags = false;
        Navigation.NavigateTo("/fulllist");

        
    }

    private static List<string> GetTopActivePannelNamesNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActivePanelCountsNoLimit(List<Upload.ReaderEvent> entries)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

void ShowModal() => IsVisible = true;
   void HideModal()
{
    IsVisible = false;
    Upload.listOfErrors = CheckForPotentialIssues(Upload.Entries);
    
}


  public static List<string> getLocations(){
            return listOflocations;
        }

    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }


 public static List<string> listOflocations = new List<string>();
    
   
    private static string _location = "";

public static string location
{
    get => _location;
    set
    {
        if (_location != value)
        {
            _location = value;
            OnLocationChanged(value);
        }
    }
}

 private static List<Upload.ReaderEvent> GetFilteredEntriesByName()
{
    return Upload.Entries
        .Where(e =>e.Location.Equals(location))
        .ToList();
}

private static void OnLocationChanged(string newValue)
{
    

    //Console.WriteLine($"Min: {selectedDateMin}" + " " + $"Max: {selectedDateMax}");
   
    //Console.WriteLine(GetFilteredEntries().Count);
    //This is for the warning flags
     Upload.listOfErrors = CheckForPotentialIssues(GetFilteredEntriesByName()); 
    
    //This is for most active people
    XAxisLabelsforPeople = GetTopActivePeopleNames(GetFilteredEntriesByName()).ToArray();
    Series2.Clear();
    Series2.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePeopleCounts(GetFilteredEntriesByName()).ToArray()});

//This is for Pannels
    XAxisLabelsforPanels = GetTopActivePanels(GetFilteredEntriesByName()).ToArray();
    Series4.Clear();
    Series4.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePanelCounts(GetFilteredEntriesByName()).ToArray()});

//This is for Readers
    XAxisLabelsforReaders = GetTopActiveReaders(GetFilteredEntriesByName()).ToArray();
    Series3.Clear();
    Series3.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActiveReadersCounts(GetFilteredEntriesByName()).ToArray()});

    //This is for Times
    XAxisLabelsforTimes = GetMostActiveHours(GetFilteredEntriesByName()).ToArray();
    Series6.Clear();
    Series6.Add(new ChartSeries() { Name = "# of Entries", Data = GetHourCounts(GetFilteredEntriesByName()).ToArray()});

//This is for locations
@* Layout.MainLayout.locations.Clear();
                foreach(string s in GetLocations()){
                    Layout.MainLayout.locations.Add(s);
                } *@


//This is for unique people count
amountPeople = GetUniquePeopleCount(GetFilteredEntriesByName());

//This is for entries/exists
entriesAndExit = GetFilteredEntriesByName().Count;

//This is for scan Activations
OrganizeEventsByDayOfWeek(GetFilteredEntriesByName());
  

  
}


    

     private bool showContent = true;

    private void nextGraphs()
    {
        showContent = !showContent;
        
        
    }


    public int GetDaysBetweenDates(DateTime selectedDateMin, DateTime selectedDateMax)
{
    return (selectedDateMax - selectedDateMin).Days + 1;
}

private List<ChartSeries> changechartToMatchTimeFrame(List<ChartSeries> s1)
{
    var s2 = new List<ChartSeries>();
    int days = GetDaysBetweenDates(selectedDateMin, selectedDateMax);

    foreach (var series in s1)
    {
        // Clone the data array
        var newData = (double[])series.Data.Clone();

        // Modify the cloned data
        for (int i = 0; i < newData.Length; i++)
        {
            newData[i] /= days;
        }

        // Create a new ChartSeries with copied properties and modified data
        s2.Add(new ChartSeries
        {
            Name = series.Name,
            Data = newData
        });
    }

    return s2;
}


public static void OnDateChange(){
    //Console.WriteLine($"Min: {selectedDateMin}" + " " + $"Max: {selectedDateMax}");
   
    //Console.WriteLine(GetFilteredEntries().Count);
    //This is for the warning flags
    @* Upload.listOfErrors = CheckForPotentialIssues(GetFilteredEntries()); *@
    
    //This is for most active people
    XAxisLabelsforPeople = GetTopActivePeopleNames(GetFilteredEntries()).ToArray();
    Series2.Clear();
    Series2.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePeopleCounts(GetFilteredEntries()).ToArray()});

//This is for Pannels
    XAxisLabelsforPanels = GetTopActivePanels(GetFilteredEntries()).ToArray();
    Series4.Clear();
    Series4.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActivePanelCounts(GetFilteredEntries()).ToArray()});

//This is for Readers
    XAxisLabelsforReaders = GetTopActiveReaders(GetFilteredEntries()).ToArray();
    Series3.Clear();
    Series3.Add(new ChartSeries() { Name = "# of Entries", Data = GetTopActiveReadersCounts(GetFilteredEntries()).ToArray()});

    //This is for Times
    XAxisLabelsforTimes = GetMostActiveHours(GetFilteredEntries()).ToArray();
    Series6.Clear();
    Series6.Add(new ChartSeries() { Name = "# of Entries", Data = GetHourCounts(GetFilteredEntries()).ToArray()});

//This is for locations
@* Layout.MainLayout.locations.Clear();
                foreach(string s in GetLocations()){
                    Layout.MainLayout.locations.Add(s);
                } *@


//This is for unique people count
amountPeople = GetUniquePeopleCount(GetFilteredEntries());

//This is for entries/exists
entriesAndExit = GetFilteredEntries().Count;

//This is for scan Activations
OrganizeEventsByDayOfWeek(GetFilteredEntries());
}

public static List<string> GetMostActiveHours(List<Upload.ReaderEvent> events)
{
    return events
        .Select(e => DateTime.TryParse(e.Time, out var dt) ? dt : (DateTime?)null)
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Take(5)
        .Select(g => $"{((g.Key + 24 - 5) % 24):00}:00")  // Wraps hour to stay within 0–23
        .ToList();
}



public static List<double> GetHourCounts(List<Upload.ReaderEvent> events)
{
    return events
        .Select(e => DateTime.TryParse(e.Time, out var dt) ? dt : (DateTime?)null)
        .Where(dt => dt.HasValue)
        .GroupBy(dt => dt.Value.Hour)
        .OrderByDescending(g => g.Count())
        .Take(5)
        .Select(g => (double)g.Count())
        .ToList();
}




private static void OrganizeEventsByDayOfWeek(List<Upload.ReaderEvent> events)
    {
        var dictionary = new Dictionary<string, List<Upload.ReaderEvent>>
        {
            {"Sunday", new List<Upload.ReaderEvent>()},
            {"Monday", new List<Upload.ReaderEvent>()},
            {"Tuesday", new List<Upload.ReaderEvent>()},
            {"Wednesday", new List<Upload.ReaderEvent>()},
            {"Thursday", new List<Upload.ReaderEvent>()},
            {"Friday", new List<Upload.ReaderEvent>()},
            {"Saturday", new List<Upload.ReaderEvent>()}
        };

        

        foreach (var evt in events)
        {
            if (DateTime.TryParse(evt.Time, out DateTime eventDate))
            {
                string dayOfWeek = eventDate.ToString("dddd");
                dictionary[dayOfWeek].Add(evt);
                
            }
        }
        Series.Clear();
        Series.Add(new ChartSeries() { Name = "# of Entries", Data = new double[] { dictionary["Sunday"].Count, dictionary["Monday"].Count, dictionary["Tuesday"].Count, dictionary["Wednesday"].Count, dictionary["Thursday"].Count, dictionary["Friday"].Count, dictionary["Saturday"].Count} });
    }


private static int GetUniquePeopleCount(List<Upload.ReaderEvent> entries)
{
    return entries.Select(e => e.IDHash).Distinct().Count();
}

 private static List<string> GetTopActiveReaders(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.ReaderDesc.Substring(22))
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActiveReadersCounts(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.ReaderDesc)
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

private static List<string> GetTopActivePanels(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

private static List<double> GetTopActivePanelCounts(List<Upload.ReaderEvent> entries,int topN = 5)
{
    return entries
        .GroupBy(e => e.Machine.ToString())
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}

private static List<double> GetTopActivePeopleCounts(List<Upload.ReaderEvent> entries, int topN = 5)
{
    return entries
        .GroupBy(e => e.IDHash)
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => (double)g.Count()) // Convert count to double
        .ToList();
}


private static List<string> GetTopActivePeopleNames(List<Upload.ReaderEvent> entries,int topN = 5)
{
    return entries
        .GroupBy(e => e.IDHash.Substring(0,10))
        .OrderByDescending(g => g.Count())
        .Take(topN)
        .Select(g => g.Key)
        .ToList();
}

public static List<string> CheckForPotentialIssues(List<Upload.ReaderEvent> entries)
{
    int SCAN_THRESHOLDForPannel = Upload.SCAN_THRESHOLDForPannel; 

    int nearPannel = Upload.nearPannel;

    int SCAN_THRESHOLDForReader = Upload.SCAN_THRESHOLDForReader; 
    int nearReader = Upload.nearReader;
    int closingTime = Upload.closeTime;

    int openingTime = Upload.openTime;

//Does not account for Day lights saving time and only works for UTE to CTE. Regular is +6 but its DST
    int openingTimeUtc = openingTime +  5;
    int closingTimeUtc = closingTime + 5 ;
    if(closingTimeUtc > 12){
        closingTimeUtc -= 12;
    }

    List<string> issues = new List<string>();

    var afterHours = entries
    .Where(e => 
    DateTime.Parse(e.Time).Hour < openingTimeUtc || DateTime.Parse(e.Time).Hour > closingTimeUtc)
    .Select(e => new { e.IDHash, e.Time, e.ReaderDesc })
    .ToList();


    var duplicateScans = entries
    .OrderBy(e => e.IDHash).ThenBy(e => e.Time)
    .GroupBy(e => e.IDHash)
    .SelectMany(group =>
        group.Zip(group.Skip(1), (a, b) => new { Prev = a, Curr = b , PrevTime = DateTime.Parse(a.Time), CurrTime = DateTime.Parse(b.Time) })
             .Where(pair =>
                 pair.Prev.ReaderDesc == pair.Curr.ReaderDesc &&
                 pair.Prev.IDHash == pair.Curr.IDHash &&
                  pair.Prev.DevID == pair.Curr.DevID &&
                  pair.Prev.Machine == pair.Curr.Machine &&
                 pair.CurrTime  == pair.PrevTime 
             )
             .Select(pair => pair.Curr)
    )
    .ToList();


   
    var machineIssuesOver = entries
        .GroupBy(e => e.Machine)  
        .Where(g => g.Count() >= SCAN_THRESHOLDForPannel)
        .Select(g => new { Machine = g.Key, Count = g.Count() })
        .ToList();

         var machineIssuesNear = entries
        .GroupBy(e => e.Machine)  
        .Where(g => g.Count() + nearPannel >= SCAN_THRESHOLDForPannel && g.Count() < SCAN_THRESHOLDForPannel)
        .Select(g => new { Machine = g.Key, Count = g.Count() })
        .ToList();

    
    var readerDescIssuesOver = entries
        .GroupBy(e => e.ReaderDesc)  
        .Where(g => g.Count() >= SCAN_THRESHOLDForReader)  
        .Select(g => new { ReaderDesc = g.Key, Count = g.Count() })
        .ToList();

        var readerDescIssuesNear = entries
        .GroupBy(e => e.ReaderDesc)  
        .Where(g => g.Count() + nearReader >= SCAN_THRESHOLDForReader && g.Count() < SCAN_THRESHOLDForReader)  
        .Select(g => new { ReaderDesc = g.Key, Count = g.Count() })
        .ToList();

       



    if (machineIssuesOver.Any() && Upload.PanelsOver)
    {
        foreach (var issue in machineIssuesOver)
        {
            issues.Add($"Pannel {issue.Machine} has {issue.Count} scans. Over threshold of {SCAN_THRESHOLDForPannel}");
        }
    }

     if (readerDescIssuesOver.Any() && Upload.ReadersOver)
    {
        foreach (var issue in readerDescIssuesOver)
        {
            issues.Add($"Reader {issue.ReaderDesc} : {issue.Count} scans. Over threshold of {SCAN_THRESHOLDForReader}");
        }
    }

     if (afterHours.Any() && Upload.afterHoursBool)
    {
        foreach (var scan in afterHours)
            {
                issues.Add($"{scan.IDHash.Substring(0,10)} scanned at {scan.ReaderDesc} at {scan.Time} — outside regular hours.");
            }
    }

    if (machineIssuesNear.Any() && Upload.PanelsNear)
    {
        foreach (var issue in machineIssuesNear)
        {
            issues.Add($"Pannel {issue.Machine} : {issue.Count} scans. Near threshold of {SCAN_THRESHOLDForPannel}");
        }
    }

    

    if (readerDescIssuesNear.Any() && Upload.ReadersNear)
    {
        foreach (var issue in readerDescIssuesNear)
        {
            issues.Add($"Reader {issue.ReaderDesc} : {issue.Count} scans. Near threshold of {SCAN_THRESHOLDForReader}");
        }
    }

    if (duplicateScans.Any() && Upload.dupBool)
    {
        foreach (var dup in duplicateScans)
        {
    issues.Add($"Duplicate scan detected for {dup.IDHash.Substring(0,10)} at {dup.ReaderDesc} at {dup.Time}.");
        }
    }

   
    if (!issues.Any())
    {
        issues.Add("No issues detected with machines or readers.");
    }

    return issues;
}





    

    

      @* public static DateTime selectedDateMin { get; set; } = DateTime.Today;
      public static DateTime selectedDateMax { get; set; } = DateTime.Today; *@




private static DateTime _selectedDateMin = DateTime.Today;
private static DateTime _selectedDateMax = DateTime.Today;




public static DateTime selectedDateMin
{
    get => _selectedDateMin;
    set
    {
        if (value <= _selectedDateMax)
        {
            
            _selectedDateMin = value;
            OnDateChange();
        }
    }
}

public static DateTime selectedDateMax
{
    get => _selectedDateMax;
    set
    {
        if (value >= _selectedDateMin)
        {
            
            _selectedDateMax = value;
            OnDateChange();
        }
    }
}




      

      public static int entriesAndExit { get; set; } = 0;

      private List<string> errorsfound = new List<string>
    {
        "Error 1: Invalid input.",
        "Error 2: Network issue.",
        "Error 3: Permission denied."
    };


      public static int amountPeople { get; set; } = 0;

       public static List<ChartSeries> Series = Upload.Series;

        public static List<ChartSeries> Series2 = Upload.SeriesPeople;

      public static List<ChartSeries> Series6 = Upload.SeriesTimes;

        public static List<ChartSeries> Series3 = Upload.SeriesReaders;
        public static List<ChartSeries> Series4 = Upload.SeriesPanel;

        public  List<ChartSeries> Series5;

        public string[] XAxisLabels = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

        public static string[] XAxisLabelsforPeople = Pages.Upload.XAxisLabelsforPeople;

        public static string[] XAxisLabelsforReaders = Pages.Upload.XAxisLabelsforReaders;

        public static string[] XAxisLabelsforPanels = Pages.Upload.XAxisLabelsforPanels;

        public static string[] XAxisLabelsforTimes = Pages.Upload.XAxisLabelsforTimes;

        private int selIndex = -1; 

        public ChartOptions Options = new ChartOptions();
        
        

     




    private void backToUpload()
    {
        Navigation.NavigateTo("/");
    }

    public void UpdateSeriesData()
{
    // Update Series5 (which is linked to Series3)
    //Series5 = changeReadersToPop(Series3); // Apply your changes dynamically
}


    protected override void OnInitialized()
    {
        Options.InterpolationOption = InterpolationOption.NaturalSpline;
        

        Series5 = Series3;
        
        //Options.YAxisTicks = 30;
        // Your startup logic here
    }

   

   

}